// Generated from gramatyka.g4 by ANTLR 4.13.1
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
public class gramatykaLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, INPUT=7, OUTPUT=8, AND=9, 
		OR=10, XOR=11, NEG=12, FLOAT=13, DOUBLE=14, INTTYPE=15, BOOLTYPE=16, BOOLEAN=17, 
		ID=18, REAL=19, INT=20, ADD=21, MULTIPLY=22, MINUS=23, DIVIDE=24, STRING=25, 
		NEWLINE=26, WS=27;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "INPUT", "OUTPUT", "AND", 
			"OR", "XOR", "NEG", "FLOAT", "DOUBLE", "INTTYPE", "BOOLTYPE", "BOOLEAN", 
			"ID", "REAL", "INT", "ADD", "MULTIPLY", "MINUS", "DIVIDE", "STRING", 
			"NEWLINE", "WS"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'='", "'('", "')'", "'['", "','", "']'", "'in'", "'out'", "'and'", 
			"'or'", "'xor'", "'neg'", "'(float)'", "'(double)'", "'(int)'", "'(bool)'", 
			null, null, null, null, "'+'", "'*'", "'-'", "'/'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, "INPUT", "OUTPUT", "AND", "OR", 
			"XOR", "NEG", "FLOAT", "DOUBLE", "INTTYPE", "BOOLTYPE", "BOOLEAN", "ID", 
			"REAL", "INT", "ADD", "MULTIPLY", "MINUS", "DIVIDE", "STRING", "NEWLINE", 
			"WS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public gramatykaLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "gramatyka.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000\u001b\u00b4\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002"+
		"\u0001\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002"+
		"\u0004\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002"+
		"\u0007\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002"+
		"\u000b\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e"+
		"\u0002\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011"+
		"\u0002\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014"+
		"\u0002\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017"+
		"\u0002\u0018\u0007\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a"+
		"\u0001\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0002"+
		"\u0001\u0003\u0001\u0003\u0001\u0004\u0001\u0004\u0001\u0005\u0001\u0005"+
		"\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\b\u0001\b\u0001\b\u0001\b\u0001\t\u0001\t\u0001\t\u0001"+
		"\n\u0001\n\u0001\n\u0001\n\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b"+
		"\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001"+
		"\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001"+
		"\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001"+
		"\u000f\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001"+
		"\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010\u0081\b\u0010\u0001"+
		"\u0011\u0004\u0011\u0084\b\u0011\u000b\u0011\f\u0011\u0085\u0001\u0012"+
		"\u0004\u0012\u0089\b\u0012\u000b\u0012\f\u0012\u008a\u0001\u0012\u0001"+
		"\u0012\u0004\u0012\u008f\b\u0012\u000b\u0012\f\u0012\u0090\u0001\u0013"+
		"\u0004\u0013\u0094\b\u0013\u000b\u0013\f\u0013\u0095\u0001\u0014\u0001"+
		"\u0014\u0001\u0015\u0001\u0015\u0001\u0016\u0001\u0016\u0001\u0017\u0001"+
		"\u0017\u0001\u0018\u0001\u0018\u0005\u0018\u00a2\b\u0018\n\u0018\f\u0018"+
		"\u00a5\t\u0018\u0001\u0018\u0001\u0018\u0001\u0019\u0003\u0019\u00aa\b"+
		"\u0019\u0001\u0019\u0001\u0019\u0001\u001a\u0004\u001a\u00af\b\u001a\u000b"+
		"\u001a\f\u001a\u00b0\u0001\u001a\u0001\u001a\u0000\u0000\u001b\u0001\u0001"+
		"\u0003\u0002\u0005\u0003\u0007\u0004\t\u0005\u000b\u0006\r\u0007\u000f"+
		"\b\u0011\t\u0013\n\u0015\u000b\u0017\f\u0019\r\u001b\u000e\u001d\u000f"+
		"\u001f\u0010!\u0011#\u0012%\u0013\'\u0014)\u0015+\u0016-\u0017/\u0018"+
		"1\u00193\u001a5\u001b\u0001\u0000\u0003\u0002\u0000AZaz\u0002\u0000\""+
		"\"\\\\\u0002\u0000\t\t  \u00bb\u0000\u0001\u0001\u0000\u0000\u0000\u0000"+
		"\u0003\u0001\u0000\u0000\u0000\u0000\u0005\u0001\u0000\u0000\u0000\u0000"+
		"\u0007\u0001\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000\u0000\u0000\u000b"+
		"\u0001\u0000\u0000\u0000\u0000\r\u0001\u0000\u0000\u0000\u0000\u000f\u0001"+
		"\u0000\u0000\u0000\u0000\u0011\u0001\u0000\u0000\u0000\u0000\u0013\u0001"+
		"\u0000\u0000\u0000\u0000\u0015\u0001\u0000\u0000\u0000\u0000\u0017\u0001"+
		"\u0000\u0000\u0000\u0000\u0019\u0001\u0000\u0000\u0000\u0000\u001b\u0001"+
		"\u0000\u0000\u0000\u0000\u001d\u0001\u0000\u0000\u0000\u0000\u001f\u0001"+
		"\u0000\u0000\u0000\u0000!\u0001\u0000\u0000\u0000\u0000#\u0001\u0000\u0000"+
		"\u0000\u0000%\u0001\u0000\u0000\u0000\u0000\'\u0001\u0000\u0000\u0000"+
		"\u0000)\u0001\u0000\u0000\u0000\u0000+\u0001\u0000\u0000\u0000\u0000-"+
		"\u0001\u0000\u0000\u0000\u0000/\u0001\u0000\u0000\u0000\u00001\u0001\u0000"+
		"\u0000\u0000\u00003\u0001\u0000\u0000\u0000\u00005\u0001\u0000\u0000\u0000"+
		"\u00017\u0001\u0000\u0000\u0000\u00039\u0001\u0000\u0000\u0000\u0005;"+
		"\u0001\u0000\u0000\u0000\u0007=\u0001\u0000\u0000\u0000\t?\u0001\u0000"+
		"\u0000\u0000\u000bA\u0001\u0000\u0000\u0000\rC\u0001\u0000\u0000\u0000"+
		"\u000fF\u0001\u0000\u0000\u0000\u0011J\u0001\u0000\u0000\u0000\u0013N"+
		"\u0001\u0000\u0000\u0000\u0015Q\u0001\u0000\u0000\u0000\u0017U\u0001\u0000"+
		"\u0000\u0000\u0019Y\u0001\u0000\u0000\u0000\u001ba\u0001\u0000\u0000\u0000"+
		"\u001dj\u0001\u0000\u0000\u0000\u001fp\u0001\u0000\u0000\u0000!\u0080"+
		"\u0001\u0000\u0000\u0000#\u0083\u0001\u0000\u0000\u0000%\u0088\u0001\u0000"+
		"\u0000\u0000\'\u0093\u0001\u0000\u0000\u0000)\u0097\u0001\u0000\u0000"+
		"\u0000+\u0099\u0001\u0000\u0000\u0000-\u009b\u0001\u0000\u0000\u0000/"+
		"\u009d\u0001\u0000\u0000\u00001\u009f\u0001\u0000\u0000\u00003\u00a9\u0001"+
		"\u0000\u0000\u00005\u00ae\u0001\u0000\u0000\u000078\u0005=\u0000\u0000"+
		"8\u0002\u0001\u0000\u0000\u00009:\u0005(\u0000\u0000:\u0004\u0001\u0000"+
		"\u0000\u0000;<\u0005)\u0000\u0000<\u0006\u0001\u0000\u0000\u0000=>\u0005"+
		"[\u0000\u0000>\b\u0001\u0000\u0000\u0000?@\u0005,\u0000\u0000@\n\u0001"+
		"\u0000\u0000\u0000AB\u0005]\u0000\u0000B\f\u0001\u0000\u0000\u0000CD\u0005"+
		"i\u0000\u0000DE\u0005n\u0000\u0000E\u000e\u0001\u0000\u0000\u0000FG\u0005"+
		"o\u0000\u0000GH\u0005u\u0000\u0000HI\u0005t\u0000\u0000I\u0010\u0001\u0000"+
		"\u0000\u0000JK\u0005a\u0000\u0000KL\u0005n\u0000\u0000LM\u0005d\u0000"+
		"\u0000M\u0012\u0001\u0000\u0000\u0000NO\u0005o\u0000\u0000OP\u0005r\u0000"+
		"\u0000P\u0014\u0001\u0000\u0000\u0000QR\u0005x\u0000\u0000RS\u0005o\u0000"+
		"\u0000ST\u0005r\u0000\u0000T\u0016\u0001\u0000\u0000\u0000UV\u0005n\u0000"+
		"\u0000VW\u0005e\u0000\u0000WX\u0005g\u0000\u0000X\u0018\u0001\u0000\u0000"+
		"\u0000YZ\u0005(\u0000\u0000Z[\u0005f\u0000\u0000[\\\u0005l\u0000\u0000"+
		"\\]\u0005o\u0000\u0000]^\u0005a\u0000\u0000^_\u0005t\u0000\u0000_`\u0005"+
		")\u0000\u0000`\u001a\u0001\u0000\u0000\u0000ab\u0005(\u0000\u0000bc\u0005"+
		"d\u0000\u0000cd\u0005o\u0000\u0000de\u0005u\u0000\u0000ef\u0005b\u0000"+
		"\u0000fg\u0005l\u0000\u0000gh\u0005e\u0000\u0000hi\u0005)\u0000\u0000"+
		"i\u001c\u0001\u0000\u0000\u0000jk\u0005(\u0000\u0000kl\u0005i\u0000\u0000"+
		"lm\u0005n\u0000\u0000mn\u0005t\u0000\u0000no\u0005)\u0000\u0000o\u001e"+
		"\u0001\u0000\u0000\u0000pq\u0005(\u0000\u0000qr\u0005b\u0000\u0000rs\u0005"+
		"o\u0000\u0000st\u0005o\u0000\u0000tu\u0005l\u0000\u0000uv\u0005)\u0000"+
		"\u0000v \u0001\u0000\u0000\u0000wx\u0005t\u0000\u0000xy\u0005r\u0000\u0000"+
		"yz\u0005u\u0000\u0000z\u0081\u0005e\u0000\u0000{|\u0005f\u0000\u0000|"+
		"}\u0005a\u0000\u0000}~\u0005l\u0000\u0000~\u007f\u0005s\u0000\u0000\u007f"+
		"\u0081\u0005e\u0000\u0000\u0080w\u0001\u0000\u0000\u0000\u0080{\u0001"+
		"\u0000\u0000\u0000\u0081\"\u0001\u0000\u0000\u0000\u0082\u0084\u0007\u0000"+
		"\u0000\u0000\u0083\u0082\u0001\u0000\u0000\u0000\u0084\u0085\u0001\u0000"+
		"\u0000\u0000\u0085\u0083\u0001\u0000\u0000\u0000\u0085\u0086\u0001\u0000"+
		"\u0000\u0000\u0086$\u0001\u0000\u0000\u0000\u0087\u0089\u000209\u0000"+
		"\u0088\u0087\u0001\u0000\u0000\u0000\u0089\u008a\u0001\u0000\u0000\u0000"+
		"\u008a\u0088\u0001\u0000\u0000\u0000\u008a\u008b\u0001\u0000\u0000\u0000"+
		"\u008b\u008c\u0001\u0000\u0000\u0000\u008c\u008e\u0005.\u0000\u0000\u008d"+
		"\u008f\u000209\u0000\u008e\u008d\u0001\u0000\u0000\u0000\u008f\u0090\u0001"+
		"\u0000\u0000\u0000\u0090\u008e\u0001\u0000\u0000\u0000\u0090\u0091\u0001"+
		"\u0000\u0000\u0000\u0091&\u0001\u0000\u0000\u0000\u0092\u0094\u000209"+
		"\u0000\u0093\u0092\u0001\u0000\u0000\u0000\u0094\u0095\u0001\u0000\u0000"+
		"\u0000\u0095\u0093\u0001\u0000\u0000\u0000\u0095\u0096\u0001\u0000\u0000"+
		"\u0000\u0096(\u0001\u0000\u0000\u0000\u0097\u0098\u0005+\u0000\u0000\u0098"+
		"*\u0001\u0000\u0000\u0000\u0099\u009a\u0005*\u0000\u0000\u009a,\u0001"+
		"\u0000\u0000\u0000\u009b\u009c\u0005-\u0000\u0000\u009c.\u0001\u0000\u0000"+
		"\u0000\u009d\u009e\u0005/\u0000\u0000\u009e0\u0001\u0000\u0000\u0000\u009f"+
		"\u00a3\u0005\"\u0000\u0000\u00a0\u00a2\b\u0001\u0000\u0000\u00a1\u00a0"+
		"\u0001\u0000\u0000\u0000\u00a2\u00a5\u0001\u0000\u0000\u0000\u00a3\u00a1"+
		"\u0001\u0000\u0000\u0000\u00a3\u00a4\u0001\u0000\u0000\u0000\u00a4\u00a6"+
		"\u0001\u0000\u0000\u0000\u00a5\u00a3\u0001\u0000\u0000\u0000\u00a6\u00a7"+
		"\u0005\"\u0000\u0000\u00a72\u0001\u0000\u0000\u0000\u00a8\u00aa\u0005"+
		"\r\u0000\u0000\u00a9\u00a8\u0001\u0000\u0000\u0000\u00a9\u00aa\u0001\u0000"+
		"\u0000\u0000\u00aa\u00ab\u0001\u0000\u0000\u0000\u00ab\u00ac\u0005\n\u0000"+
		"\u0000\u00ac4\u0001\u0000\u0000\u0000\u00ad\u00af\u0007\u0002\u0000\u0000"+
		"\u00ae\u00ad\u0001\u0000\u0000\u0000\u00af\u00b0\u0001\u0000\u0000\u0000"+
		"\u00b0\u00ae\u0001\u0000\u0000\u0000\u00b0\u00b1\u0001\u0000\u0000\u0000"+
		"\u00b1\u00b2\u0001\u0000\u0000\u0000\u00b2\u00b3\u0006\u001a\u0000\u0000"+
		"\u00b36\u0001\u0000\u0000\u0000\t\u0000\u0080\u0085\u008a\u0090\u0095"+
		"\u00a3\u00a9\u00b0\u0001\u0006\u0000\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}